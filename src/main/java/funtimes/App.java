/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package funtimes;


import funtimes.command.InteractivePrompt;
import org.apache.commons.lang3.math.NumberUtils;

import java.math.BigDecimal;
import java.time.LocalDate;
import java.util.*;

public class App {

    public static final LocalDate APP_DATE = LocalDate.now();

    public static void main(String[] args) {

        ShoppingCart cart = new ShoppingCart();

        Scanner scanner = new Scanner(System.in);
        InteractivePrompt prompt = new InteractivePrompt();
        while (true) {
            System.out.println(prompt.greeting() + "\n" + prompt.optionsLevel1());
            String option = scanner.next();
            System.out.println("Option selected is " + option);
            Optional<InteractivePrompt.Option> optionDetected = prompt.detectOption(option);
            while (!optionDetected.isPresent()) {
                System.out.println(prompt.promptNotRecognized(option));
                option = scanner.next();
                optionDetected = prompt.detectOption(option);
            }
            InteractivePrompt.Option userOption = optionDetected.get();
            if (userOption == InteractivePrompt.Option.SYSTEM_OPTION) {
                if ("0".equals(option)) {
                    System.out.println(prompt.promptHowManyDays());
                    String daysInAdvance = scanner.next();
                    while (!NumberUtils.isDigits(daysInAdvance)) {
                        System.out.println(prompt.promptNotRecognized(daysInAdvance));
                        System.out.println(prompt.promptHowManyDays());
                        daysInAdvance = scanner.next();
                    }
                    cart = new ShoppingCart(Integer.valueOf(daysInAdvance));
                }
                if ("T".equals(option)) {
                    System.out.println("Total before discount: " + cart.calculateRunningTotalBeforeDiscount());
                    System.out.println();
                }
                if ("Z".equals(option)) {
                    System.out.println(toString(cart));
                    System.out.println("Amount to checkout is " + cart.calculateTotalAfterDiscount());
                    System.out.println("A new shopping cart will be used");
                    System.out.println();
                }
            }
            if (userOption == InteractivePrompt.Option.STOCK_ITEM_OPTION) {
                Integer stockItemOption = Integer.valueOf(option);
                System.out.println(prompt.askUnits(stockItemOption));
                Integer nUnits = askUnits(prompt, scanner, option);
                cart.add(prompt.numberToStockItem(stockItemOption), nUnits);
            }
        }
    }

    public static Integer askUnits(InteractivePrompt prompt, Scanner scanner, String option) {
        String nUnits = scanner.next();
        while (!NumberUtils.isDigits(nUnits)) {
            System.out.println(prompt.promptNotRecognized(nUnits));
            System.out.println(prompt.askUnits(Integer.valueOf(option)));
            nUnits = scanner.next();
        }
        return Integer.valueOf(nUnits);
    }

    public static String toString(ShoppingCart cart) {
        StringBuilder builder = new StringBuilder("--------\nItem(s) in the shopping cart\n");
        List<StockItem> itemList = new ArrayList<>(new HashSet<>(cart.getItems()));
        itemList
                .forEach(item -> builder.append(item.getProduct()).append(": ").append(cart.unitsOf(item)).append("\n"));
        builder.append("Total before discount: ").append(cart.calculateRunningTotalBeforeDiscount()).append("\n");
        builder.append("--------\n");
        builder.append("Discount\n");
        Map<StockItem, BigDecimal> discounts = cart.calculateDiscounts();
        if (discounts.isEmpty()) {
            builder.append("N/A\n");
        }
        discounts
                .keySet()
                .forEach(k -> builder.append(k.getProduct()).append(": ").append(discounts.get(k)).append("\n"));
        builder.append("--------\n");
        builder.append("Total cost: ").append(cart.calculateTotalAfterDiscount()).append("\n");
        builder.append("--------\n");
        return builder.toString();
    }
}
